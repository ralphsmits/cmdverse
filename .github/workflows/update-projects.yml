name: Update Projects JSON

on:
  workflow_dispatch:
    inputs:
      projectJson:
        description: 'JSON string of new project'
        required: true
        type: string

jobs:
  update-json:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.TOKEN_GITHUB }}
        fetch-depth: 0

    - name: Debug received input
      run: |
        echo "Raw input received:"
        echo "${{ github.event.inputs.projectJson }}"
        
        # Save input to file for debugging
        echo '${{ github.event.inputs.projectJson }}' > input.json
        echo "Input saved to input.json:"
        cat input.json
        
        # Validate JSON
        if python -c "import json; json.load(open('input.json')); print('JSON is valid')"; then
          echo "✅ JSON validation passed"
        else
          echo "❌ JSON validation failed"
          exit 1
        fi

    - name: Create or update projects.json
      run: |
        # Create Python script to handle JSON merging
        cat > update_projects.py << 'EOF'
        import json
        import os
        import sys
        
        print("=== Starting projects.json update ===")
        
        # Read the new project data
        with open('input.json', 'r') as f:
            new_project = json.load(f)
        
        print(f"New project data: {json.dumps(new_project, indent=2)}")
        
        # Read existing projects or create empty array
        if os.path.exists('projects.json'):
            with open('projects.json', 'r') as f:
                try:
                    projects = json.load(f)
                    print(f"Found existing projects.json with {len(projects)} projects")
                except json.JSONDecodeError:
                    print("projects.json is invalid, starting fresh")
                    projects = []
        else:
            print("projects.json not found, creating new file")
            projects = []
        
        # Add new project
        projects.append(new_project)
        print(f"Added project. Total projects now: {len(projects)}")
        
        # Write back to file
        with open('projects.json', 'w') as f:
            json.dump(projects, f, indent=2)
        
        print("✅ Successfully updated projects.json")
        EOF
        
        python update_projects.py

    - name: Verify the updated file
      run: |
        echo "=== Final projects.json content ==="
        if [ -f projects.json ]; then
          cat projects.json
          echo "File size: $(wc -c < projects.json) bytes"
        else
          echo "❌ projects.json was not created!"
          exit 1
        fi

    - name: Commit changes
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        
        git add projects.json
        if git diff --staged --quiet; then
          echo "No changes to commit"
        else
          git commit -m "Add new project: ${{ github.event.inputs.projectJson.projectName || 'Unknown project' }}"
          git push
          echo "✅ Changes committed and pushed"
        fi
